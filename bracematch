#!/usr/bin/perl -w
# quick script to reindent juniper configs, check for matching braces,
# and convert full configs into "set" syntax.
# https://github.com/ermuller/bracematch

use strict;
use Getopt::Long qw(:config auto_help auto_version);
use Pod::Usage;

our $VERSION="1.1.0b3";

my $verbose=0;
my $indent = '  ';
my $doindent=1;
my $orig=0;
my $setify=0;
my $truncateheaders=0;
my $doheader=1;
my %stack=(0,'',-1,'Error');
my $showdepth=0;
my $showpath=0;
my $quiet=0;
my $help;
my $man;

# Get options
my $results = GetOptions(  "verbose" => \$verbose,
	    "indent=s" => \$indent,
	    "header|c" => \$doheader,
	        "orig" => \$orig,
	       "set|s" => \$setify,
	     "quiet|q" => \$quiet,
	 "showDepth|d" => \$showdepth,
	  "showPath|p" => \$showpath,
	    "truncate" => \$truncateheaders,
              "help|h" => \$help,
                 "man" => \$man
) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

my $depth=0;
my $header="";
my $note;
my $up=0;
my $overclose=0;
my $headermatch;
if ($orig) {$doindent=0;}
if (!$truncateheaders) {
	# grab all the header.
	$headermatch = qr/\s*((?:.*\s+)*\S+)\s*\{\s*((#|\/\/).*)?$/;
} else {
	# "truncated section headers" mode.
	# Probably only ever want this for debuging template stuff..
	# use just the last element of an item as a header.
	# eg, capture "0.0.0.0" instead of "area 0.0.0.0"
	# effectively incompatible with "set"
	# TODO: probably just need to nuke this section
	$headermatch = qr/(?:.*\s+)*(\S+)\s*\{\s*((#|\/\/).*)?$/;
}
while (<>) {
	chomp;
	$_ =~ s/\s*$// unless ($orig);
	next if ((/^$/) && !($orig));
	# open or close a block?
	if ($_ =~ m/$headermatch/) {
		$header = $1;
		$stack{$depth+1} = $header;
		$up=1;
	}
	elsif ( $_ =~ /\}\s*((#|\/\/).*)?$/) {
		$depth--;
		if ($depth < 0 ) {
			$overclose++;
			#$depth=0;
			print "Warning: unmatched }\n" unless ($quiet);
		#} else {
		#	$header=$stack{$depth} unless ($depth == 0);
		}
		$header=$stack{$depth};
		if (!defined $header) {
			$header='Error';
			print "Boom!\n";
		}
	}
	# now process content and/or output lines
	if ($showpath) {
		my $path="";
		$path.=join(":",getStack(%stack)).":";
		print "$path\n";
	}
	if ($quiet) {
		# just count, but don't output normal content
	}
	elsif ($verbose) {
		print "$depth:$header: $_\n";
	}
	elsif ($orig) {
		print "$_\n";
	}
	elsif ($setify) {
		my $noprint=0;
		$noprint = 1 if (/^\s*#/); # skip comments
		$noprint = 1 if (/^\s*}\s*$/); # skip block ends
		$noprint = 1 if (/ {\s*$/); # skip block openers
		# pickup annotation
		if (/^\s*\/\*\s(.*)\s\*\//) {
			$note = $1;
			$noprint = 1;
		}
		my $line=$_;
		$line =~ s/^\s+//; # trim leading whitespace
		$line =~ s/\;(?:\s*#.*)?$//; # trim ; and trailing comments
		print "set".join(" ",getStack(%stack))." $line\n" unless ($noprint);
		if (defined $note && !$noprint) {
# TODO - how are annotatable sections defined?
#eg the following
#        /* reduce the impact of transport fiber blips */
#        hold-time up 4000 down 4000;
# needs 'annotate hold-time "foo bar"'
#but
#    /* includes NS hosts */
#    prefix-list dns-auth {
# takes the whole item as key

			print "edit".join(" ",getStack(%stack))."\n" unless ($noprint);
			my $notecontext = $line;
			$notecontext =~ s/(hold-time)\s.*/\1/;
			print "annotate $notecontext \"$note\"\n";
			print "up $depth\n";
			undef $note;
		}
	}
	elsif ($doindent) {
		my $line=$_;
		my $space=(${indent} x $depth);
		$line =~ s/^\s*/${space}/;
		if ($showdepth) {
			$line="$depth: ".$line;
		}
		print "$line\n";
	}
	if ($up) {
		$depth++;
		$up=0;
	}
}
if ( $depth != 0) {
	print "Error: mismatched braces at end ($depth).\n";
	exit 1;
}
if ( $overclose != 0 ) {
	print "Error: $overclose extra closing braces found.\n";
	exit 1;
}
exit 0;
sub getStack {
	my $stack = shift;
	my @path;
	for (my $j=0; $j<=($depth); $j++) {
		push (@path,$stack{$j});
	}
	return @path;
}

__END__
=head1 NAME

bracematch - Check juniper-syntax configurations for matching braces

=head1 SYNOPSIS

  bracematch [options]
Options:
  --verbose   -v show more detail
  --indent <s>   string to indent with per level.  Default is '  '.
  --orig         Do not reformat/re-indent
  --set       -s (Experimental) translate to "set" statements
  --quiet     -q Don't output body, just check format validity
  --showDepth -d indicate the nesting depth of each statement
  --showPath  -p print full config path context for each line
  --truncate     use truncated rather than full headers in stack
  --help      -h print basic usage
  --version      show version
  --man          print man page

=head1 DESCRIPTION

B<bracematch> filters stdin for juniper-style configurations, and attempts to
follow the statement hierarchy, checking for matching braces and cleaning up
inconsistent indenting for readability.  No attempt is made to verify that
the content is sensible or otherwise valid, but it will help identify various
forms of obviously-broken syntax.

=head1 OPTIONS

=over

=item B<-s>,B<--set>

Attempts to turn a configuration into a series of set statements.
Silly things probably happen with comments, and lists or empty
blocks may not be preserved correctly.  Single-line annotations are
preserved if possible, but context may be wrong for annotations on
items where the whole line is not the config key (eg hold-time).

=item B<--indent>=I<string>

Specifies a per-level indent string to use.  '  ' is the default for
compact but readable output; '    ' would better approximate normal
juniper output.

=item B<--orig>

Preserve original format.  The opposite of --indent

=item B<-q>,B<--quiet>

No output other than errors.

=item B<other options>

Other options are mainly for debugging purposes and their syntax and
meaning are subject to change.

=back

=head1 RETURN VALUE

Exits with 0 on a clean file, 1 otherwise.

=head1 EXAMPLES

C<cat router.conf | bracematch>

=head1 KNOWN ISSUES

Multi-line annotations are not supported.

=head1 AUTHOR

Erik Muller (em@netuf.net)

Copyright 2015 Network Utility Force LLC
This software is distributed under the terms of the Perl Artistic Licence 2.0.

=cut


