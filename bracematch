#!/usr/bin/perl -w
# quick script to reindent juniper configs, and check for matching braces
# https://github.com/ermuller/bracematch

use strict;
use Getopt::Long qw(:config auto_help auto_version);
use Pod::Usage;

our $VERSION="1.0.3";

my $verbose=0;
my $indent = '  ';
my $doindent=1;
my $orig=0;
my $fullheaders=0;
my $doheader=1;
my %stack=(0,'',-1,'Error');
my $showdepth=0;
my $showstack=0;
my $help;
my $man;

# Get options
my $results = GetOptions(  "verbose" => \$verbose,
	    "indent=s" => \$indent,
	    "header|c" => \$doheader,
	        "orig" => \$orig,
	        "full" => \$fullheaders,
	 "showDepth|d" => \$showdepth,
	 "showStack|s" => \$showstack,
              "help|h" => \$help,
                 "man" => \$man
) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

my $depth=0;
my $header="";
my $up=0;
my $overclose=0;
my $headermatch;
if ($orig) {$doindent=0;}
if ($fullheaders) {
	$headermatch = qr/\s*((?:.*\s+)*\S+)\s*\{\s*((#|\/\/).*)?$/;
} else {
	$headermatch = qr/(?:.*\s+)*(\S+)\s*\{\s*((#|\/\/).*)?$/;
}
while (<>) {
	chomp;
	$_ =~ s/\s*$// unless ($orig);
	next if (/^$/);
	if ($_ =~ m/$headermatch/) {
		$header = $1;
		$stack{$depth+1} = $header;
		$up=1;
	}
	elsif ( $_ =~ /\}\s*((#|\/\/).*)?$/) {
		$depth--;
		if ($depth < 0 ) {
			$overclose++;
			#$depth=0;
			print "Warning: unmatched }\n";
		#} else {
		#	$header=$stack{$depth} unless ($depth == 0);
		}
		$header=$stack{$depth};
		if (!defined $header) {
			$header='Error';
			print "Boom!\n";
		}
	}
	if ($showstack) {
		my $path="";
		for (my $j=0; $j<=($depth); $j++) {
			$path.=$stack{$j}.":";
		}
		print "$path\n";
	}
	if ($verbose) {
		print "$depth:$header: $_\n";
	}
	elsif ($orig) {
		print "$_\n";
	}
	elsif ($doindent) {
		my $line=$_;
		my $space=(${indent} x $depth);
		$line=~ s/^\s*/${space}/;
		if ($showdepth) {
			$line="$depth: ".$line;
		}
		print "$line\n";
	}
	if ($up) {
		$depth++;
		$up=0;
	}
}
if ( $depth != 0) {
	print "Error: mismatched braces at end ($depth).\n";
	exit 1;
}
if ( $overclose != 0 ) {
	print "Error: $overclose extra closing braces found.\n";
	exit 1;
}

__END__
=head1 NAME

bracematch - Check juniper-syntax configurations for matching braces

=head1 SYNOPSIS

  bracematch [options]
Options:
  --verbose   -v show more detail
  --indent <s>   string to indent with per level.  Default is '  '.
  --orig         Do not reformat/re-indent
  --full      -f use full rather than shortened headers in stack
  --showDepth -d indicate the nesting depth of each statement
  --showStack -s print full config path context for each line
  --help      -h print basic usage
  --version      show version
  --man          print man page

=head1 DESCRIPTION

B<bracematch> filters stdin for juniper-style configurations, and attempts to
follow the statement hierarchy, checking for matching braces and cleaning up
inconsistent indenting for readability.


=head1 AUTHOR

Erik Muller (em@netuf.net)

Copyright 2015 Network Utility Force LLC
This software is distributed under the terms of the Perl Artistic Licence 2.0.

=cut


